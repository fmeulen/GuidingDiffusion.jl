wdir = @__DIR__
cd(wdir)
outdir= joinpath(wdir, "out")

using Revise
using LinearAlgebra
using GuidingDiffusion
using Distributions
using Bridge
using Plots
using StaticArrays
#import Bridge: constdiff


include("plotting.jl")

################################  TESTING  ################################################

S = DE(Vern7())

include("generatedata.jl")

timegrids = set_timegrids(obs, 0.0005)

Cinit = 15.0

iterations = 50_00  #5_00
skip_it = 200
subsamples = 0:skip_it:iterations # for saving paths

# define priors

# prior = Dict("A"=> Exponential(3.25), 
#             "B" => Exponential(22.0),
#             "C" => Exponential(135.0),
#             "Œ±1" => Uniform(0.0, 1.0),
#             "Œ±2" => Uniform(0.0, 1.0),
#             "e0" => Exponential(5.0),
#             "v0" => Exponential(6.0),
#             "r" => Exponential(0.56),
#             "Œº" => Exponential(200.0),
#             "œÉ" => Uniform(0.0, 10_000.0)  )

Œ† = (A=Exponential(3.25), 
        B=Exponential(22.0),
        C=Exponential(135.0),
        Œ±1=Beta(1.0, 1.0),
        Œ±2=Beta(1.0, 1.0),
        e0=Exponential(5.0),
        v0=Exponential(6.0),
        r=Exponential(0.56),
        Œº=Exponential(200.0),
        œÉ=InverseGamma(0.1, 0.1) )


ùíØ = (A=(short=0.02, long=.1),
B=(short=0.2, long=1.0),
C=(short=0.01, long=.5),
Œ±1=(short=0.01, long=.1),
Œ±2=(short=0.02, long=.1),
e0=(short=0.2, long=1.0),
v0=(short=0.2, long=1.0),
r=(short=0.2, long=1.0),
Œº=(short=0.2, long=1.0),
œÉ=(short=0.2, long=1.0) )

ùíØe = (A=(short=0.02, long=.1),C=(short=10.0, long=50.0))


#import GuidingDiffusion: parameterkernel

# some testing
params = [:C]   #, :Œ±1]#, :B]

# moves = repeat([ParMove([:C], false, ùíØ, Œ†),
#          ParMove([:Œ±1], false, ùíØ, Œ†)], 3)
# push!(moves, ParMove([:C, :Œ±1], true, ùíØ, Œ†))

# moves = [ParMove([:C], false, ùíØ, Œ†),ParMove([:Œ±1], true, ùíØ, Œ†)]

#params = [:Œ±1]
#moves = [ParMove([:Œ±1], true, ùíØ, Œ†)]

moves =[ParMove([:C], false, ùíØ, Œ†)]
movese =[ParMove([:C], false, ùíØe, Œ†)]


# settings
verbose = true # if true, surpress output written to console



# ESTœÉ = false



# initialise parameter
‚Ñô = setproperties(‚Ñô0,  C = Cinit)
temp = 10_000.0 # temperature
‚Ñôe = setproperties(‚Ñô0,   œÉ = temp, C = Cinit)



# overwrite, figure out later precisely
# allparnames = params
# allparnamese = params

# pcn pars 
œÅ = 0.98
œÅe = 0.98

# initialisation of target chain 
B = BackwardFilter(S, ‚Ñô, AuxType, obs, obsvals, timegrids);
Z = Innovations(timegrids, ‚Ñô);
Zbuffer = deepcopy(Z)
Z·µí = deepcopy(Z)
œÅs = fill(œÅ, length(timegrids))
XX, ll = forwardguide(B, ‚Ñô)(x0, Z);


# initialisation of exploring chain 
Be = BackwardFilter(S, ‚Ñôe, AuxType, obs, obsvals, timegrids);
Ze = deepcopy(Z)# Innovations(timegrids, ‚Ñôe);# deepcopy(Z);
Ze·µí = deepcopy(Ze)
œÅse = fill(œÅe, length(timegrids))
XXe, lle = forwardguide(Be, ‚Ñôe)(x0, Ze);



Œ∏save = [copy(getpar(params, ‚Ñô))]
XXsave = [copy(XX)]
llsave = [ll]

XXesave = [copy(XXe)]

# acceptance rate counters
accinnov = 0
accpar = 0
accinnove = 0
accpare = 0
accmove = 0

accpar_= accpare_ = accinnove_= accinnov_= accmove_ =0


exploring = [State(x0, copy(Ze), getpar(params,‚Ñôe), copy(lle))] # collection of samples from exploring chain


for i in 1:iterations
  (i % 500 == 0) && println(i)
  global accpar_, accpare_,accinnove_, accinnov_, accmove_

  # update exploring chain
  for move ‚àà moves
    lle, Be, ‚Ñôe, accpare_ = parupdate!(Be, XXe, move, obs, obsvals, S, AuxType, timegrids; verbose=verbose)(x0, ‚Ñôe, Ze, lle);
  end
  lle, accinnove_ = pcnupdate!(Be, ‚Ñôe, XXe, Zbuffer, Ze·µí, œÅse)(x0, Ze, lle); 
      
  # update target chain   
  for move ‚àà moves
    smallworld = rand() > 0.33
    if smallworld
      ll, B, ‚Ñô, accpar_ = parupdate!(B, XX, move, obs, obsvals, S, AuxType, timegrids; verbose=verbose)(x0, ‚Ñô, Z, ll);
      accmove_ =0
    else
      w = sample(exploring)     # randomly choose from samples of exploring chain
      ll, ‚Ñô,  accmove_ = exploremoveœÉfixed!(B, Be, ‚Ñôe, move, XX, Z·µí, w; verbose=verbose)(x0, ‚Ñô, Z, ll) 
      accpar_ = 0
    end  
  end
  ll, accinnov_ = pcnupdate!(B, ‚Ñô, XX, Zbuffer, Z·µí, œÅs)(x0, Z, ll);

  # update exploring
  push!(exploring, State(x0, copy(Ze), getpar(params, ‚Ñôe), copy(lle)))   

  # update acceptance counters
  accpar += accpar_; accpare += accpare_; accinnove += accinnove_; accinnov += accinnov_; accmove += accmove_
  
  # saving iterates
  push!(Œ∏save, getpar(params, ‚Ñô))
  push!(llsave, ll)
  (i in subsamples) && push!(XXsave, copy(XX))
  (i % 500 == 0) && push!(XXesave, XXe)
  
 # adjust_PCNparameters!(œÅs, œÅ)
end




# final imputed path
plot_all(‚Ñô, timegrids, XXsave[end])

obstimes = getfield.(obs, :t)

plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXsave[1])
savefig(joinpath(outdir,"guidedpath_firstiteration.png"))
plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXsave[end])
savefig(joinpath(outdir,"guidedpath_finaliteration.png"))

plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXesave[1])
savefig(joinpath(outdir,"guidedpath_firstiteration_exploring.png"))
plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXesave[end])
savefig(joinpath(outdir,"guidedpath_finaliteration_exploring.png"))


#
println("Target chain: accept% innov ", 100*accinnov/iterations,"%")
println("Target chain: accept% par ", 100*accpar/iterations,"%")
println("Exploring chain: accept% innov ", 100*accinnove/iterations,"%")
println("Exploring chain: accept% par ", 100*accpare/iterations,"%")

println("accept% swap ", 100*accmove/iterations,"%")

Œ∏esave = getfield.(exploring,:Œ∏)
llesave = getfield.(exploring, :ll)

h1 = histogram(getindex.(Œ∏save,1),bins=35, label="target chain")
h2 = histogram(getindex.(Œ∏esave,1),bins=35, label="exploring chain")
plot(h1, h2, layout = @layout [a b])  

p1 = plot(llsave, label="target",legend=:bottom)    
plot!(p1,llesave, label="exploring")    
savefig(joinpath(outdir,"logliks.png"))

# traceplots
i = 1
p1 = plot(getindex.(Œ∏save,i), label="target", legend=:top)
hline!(p1, [getfield(‚Ñô0,params[i])], label="",color=:black)
plot!(p1, getindex.(Œ∏esave,i), label="exploring")

@error "stop"


# i = 2
# p2 = plot(getindex.(Œ∏save,i), label="target", legend=:top)
# hline!(p2, [getfield(‚Ñô0,params[i])], label="",color=:black)
# plot!(p2, getindex.(Œ∏esave,i), label="exploring")

# i = 3
# p3 = plot(getindex.(Œ∏save,i), label="target", legend=:top)
# hline!(p3, [getfield(‚Ñô0,params[i])], label="",color=:black)
# plot!(p3, getindex.(Œ∏esave,i), label="exploring")

#plot(p1, p2, layout = @layout [a; b])  




ESTœÉ = false
if ESTœÉ 
  pb = plot(getindex.(Œ∏save,2), label="target", legend=:top)
  hline!(pb, [‚Ñô0.œÉ], label="",color=:black)
  plot(pa, pb, layout = @layout [a; b])  
end
savefig(joinpath(outdir,"traceplots.png"))


#scatter(getindex.(Œ∏save,1), getindex.(Œ∏save,2))



