wdir = @__DIR__
cd(wdir)
outdir= joinpath(wdir, "out")

using Revise
using LinearAlgebra
using GuidingDiffusion
using Distributions
using Bridge
using Plots
using StaticArrays
#import Bridge: constdiff


include("plotting.jl")

################################  TESTING  ################################################

S = DE(Vern7())

include("generatedata.jl")

timegrids = set_timegrids(obs, 0.0005)


iterations = 2_000  #5_00
skip_it = 200
subsamples = 0:skip_it:iterations # for saving paths

# define priors

# prior = Dict("A"=> Exponential(3.25), 
#             "B" => Exponential(22.0),
#             "C" => Exponential(135.0),
#             "Œ±1" => Uniform(0.0, 1.0),
#             "Œ±2" => Uniform(0.0, 1.0),
#             "e0" => Exponential(5.0),
#             "v0" => Exponential(6.0),
#             "r" => Exponential(0.56),
#             "Œº" => Exponential(200.0),
#             "œÉ" => Uniform(0.0, 10_000.0)  )

Œ† = (A=Exponential(3.25), 
        B=Exponential(22.0),
        C=Exponential(135.0),
        Œ±1=Beta(1.0, 1.0),
        Œ±2=Beta(1.0, 1.0),
        e0=Exponential(5.0),
        v0=Exponential(6.0),
        r=Exponential(0.56),
        Œº=Exponential(200.0),
        œÉ=InverseGamma(0.1, 0.1) )


ùíØ = (A=(short=0.2, long=1.0),
B=(short=0.2, long=1.0),
C=(short=0.2, long=1.0),
Œ±1=(short=0.2, long=1.0),
Œ±2=(short=0.2, long=1.0),
e0=(short=0.2, long=1.0),
v0=(short=0.2, long=1.0),
r=(short=0.2, long=1.0),
Œº=(short=0.2, long=1.0),
œÉ=(short=0.2, long=1.0) )




#import GuidingDiffusion: parameterkernel

# some testing

move = ParMove([:A, :Œº], false, ùíØ, Œ†)
ParMove([:œÉ], false, ùíØ, Œ†)

Œ∏ = exp.(rand(2))
Œ∏·µí = move.K(Œ∏)

Œ†sub = [getfield(Œ†,x) for x in [:A, :Œº] ] 

moveœÉ = ParMove([:œÉ], parameterkernel((short=[3.0], long=[10.0]); s=0.0), priorœÉ, true)

moveC·µí = ParMove([:C], parameterkernel((short=[40.0], long=[100.0])), priorC, false)

moveCœÉ = ParMove([:C, :œÉ], parameterkernel((short=[2.0, 10.0], long=[10.0, 10.0]); s=0.0), product_distribution([priorC, priorœÉ]), true)

moveCœÉŒ±1 = ParMove([:C, :œÉ, :Œ±1], parameterkernel((short=[2.0, 10.0, 0.01], long=[10.0, 10.0, 0.1]); s=0.0), product_distribution([priorC, priorœÉ, priorŒ±1]), true)

moveCŒ±1 = ParMove([:C, :Œ±2], parameterkernel((short=[2.0,  0.01], long=[10.0,  0.1]); s=0.3), product_distribution([priorC,  priorŒ±1]), false)
# a small program

# settings
verbose = true # if true, surpress output written to console


Œ∏init = 100.0
ESTœÉ = true



if ESTœÉ
  Œ∏ = (C=copy(Œ∏init), œÉ = 2.0)
  movetarget = moveCœÉ
  allparnames = [:C, :œÉ]
else
  Œ∏ = (; C = copy(Œ∏init) ) # initial value for parameter
  movetarget = moveC
  allparnames = [:C]
end
‚Ñô = setproperties(‚Ñô0, Œ∏)

Œ∏ = (C=copy(Œ∏init), Œ±1=0.5)
movetarget = moveCŒ±1
allparnames = [:C,  :Œ±2]
‚Ñô = setproperties(‚Ñô0, Œ∏)

ùíØ = 40.0 # temperature
‚Ñôe = setproperties(‚Ñô0, C=copy(Œ∏init),  œÉ = ùíØ)
allparnamese = [:C]
move_exploring = moveC·µí



# pcn pars 
œÅ = 0.95
œÅe = 0.95

# initialisation of target chain 
B = BackwardFilter(S, ‚Ñô, AuxType, obs, obsvals, timegrids);
Z = Innovations(timegrids, ‚Ñô);
Zbuffer = deepcopy(Z)
Z·µí = deepcopy(Z)
œÅs = fill(œÅ, length(timegrids))
XX, ll = forwardguide(B, ‚Ñô)(x0, Z);


# initialisation of exploring chain 
Be = BackwardFilter(S, ‚Ñôe, AuxType, obs, obsvals, timegrids);
Ze = Innovations(timegrids, ‚Ñôe);# deepcopy(Z);
Ze·µí = deepcopy(Ze)
œÅse = fill(œÅe, length(timegrids))
XXe, lle = forwardguide(Be, ‚Ñôe)(x0, Ze);



Œ∏save = [copy(getpar(allparnames, ‚Ñô))]
XXsave = [copy(XX)]
llsave = [ll]

XXesave = [copy(XXe)]



accinnov = 0
accpar = 0
accinnove = 0
accpare = 0
accmove = 0


exploring = [State(x0, copy(Ze), getpar(allparnamese,‚Ñôe), copy(lle))]

for i in 1:iterations
  (i % 500 == 0) && println(i)
  
  # update exploring chain
  if i==1  
  lle, Be, ‚Ñôe, accpare_ = parupdate!(Be, XXe, move_exploring, obs, obsvals, S, AuxType, timegrids; verbose=verbose)(x0, ‚Ñôe, Ze, lle);# Œ∏e and XXe may get overwritten
  lle, accinnove_ = pcnupdate!(Be, ‚Ñôe, XXe, Zbuffer, Ze·µí, œÅse)(x0, Ze, lle); # Z and XX may get overwritten
  push!(exploring, State(x0, copy(Ze), getpar(allparnamese, ‚Ñôe), copy(lle)))   # collection of samples from exploring chain
  end

  # update target chain
  smallworld = rand() > 0.33
  if smallworld
    ll, B, ‚Ñô, accpar_ = parupdate!(B, XX, movetarget, obs, obsvals, S, AuxType, timegrids; verbose=verbose)(x0, ‚Ñô, Z, ll);# Œ∏ and XX may get overwritten
    accmove_ =0
  else
    w = sample(exploring)     # randomly choose from samples of exploring chain
    ll, ‚Ñô,  accmove_ = exploremoveœÉfixed!(B, Be, ‚Ñôe, move_exploring, XX, Z·µí, w; verbose=verbose)(x0, ‚Ñô, Z, ll) 
    accpar_ = 0
    #println(‚Ñô.C ==Œ∏[1])
  end  
  ll, accinnov_ = pcnupdate!(B, ‚Ñô, XX, Zbuffer, Z·µí, œÅs)(x0, Z, ll); # Z and XX may get overwritten

  
  # update acceptance counters
#  accpar += accpar_; accpare += accpare_; accinnove += accinnove_; accinnov += accinnov_; accmove += accmove_
  # saving iterates
  push!(Œ∏save, getpar(allparnames, ‚Ñô))
  push!(llsave, ll)
  (i in subsamples) && push!(XXsave, copy(XX))
  (i % 500 == 0) && push!(XXesave, XXe)
  
  adjust_PNCparamters!(œÅs, œÅ)
end




# final imputed path
plot_all(‚Ñô, timegrids, XXsave[end])

obstimes = getfield.(obs, :t)

plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXsave[1])
savefig(joinpath(outdir,"guidedpath_firstiteration.png"))
plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXsave[end])
savefig(joinpath(outdir,"guidedpath_finaliteration.png"))

plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXesave[1])
savefig(joinpath(outdir,"guidedpath_firstiteration_exploring.png"))
plot_all(‚Ñô, Xf, obstimes, obsvals, timegrids, XXesave[end])
savefig(joinpath(outdir,"guidedpath_finaliteration_exploring.png"))


#
println("Target chain: accept% innov ", 100*accinnov/iterations,"%")
println("Target chain: accept% par ", 100*accpar/iterations,"%")
println("Exploring chain: accept% innov ", 100*accinnove/iterations,"%")
println("Exploring chain: accept% par ", 100*accpare/iterations,"%")

println("accept% swap ", 100*accmove/iterations,"%")

Œ∏esave = getindex.(getfield.(exploring,:Œ∏),1)
llesave = getfield.(exploring, :ll)

h1 = histogram(getindex.(Œ∏save,1),bins=35, label="target chain")
h2 = histogram(getindex.(Œ∏esave,1),bins=35, label="exploring chain")
plot(h1, h2, layout = @layout [a b])  

p1 = plot(llsave, label="target",legend=:bottom)    
plot!(p1,llesave, label="exploring")    
savefig(joinpath(outdir,"logliks.png"))

# traceplots
pa = plot(getindex.(Œ∏save,1), label="target", legend=:top)
hline!(pa, [‚Ñô0.C], label="",color=:black)
plot!(pa, getindex.(Œ∏esave,1), label="exploring")

if ESTœÉ 
  pb = plot(getindex.(Œ∏save,2), label="target", legend=:top)
  hline!(pb, [‚Ñô0.œÉ], label="",color=:black)
  plot(pa, pb, layout = @layout [a; b])  
end
savefig(joinpath(outdir,"traceplots.png"))


scatter(getindex.(Œ∏save,1), getindex.(Œ∏save,2))



